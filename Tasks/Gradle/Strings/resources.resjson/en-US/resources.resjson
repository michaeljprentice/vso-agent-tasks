{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[More Information](http://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "Build using a Gradle wrapper script",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.group.displayName.junitTestResults": "JUnit Test Results",
  "loc.group.displayName.codeCoverage": "Code Coverage",
  "loc.group.displayName.advanced": "Advanced",
  "loc.input.label.wrapperScript": "Gradle Wrapper",
  "loc.input.help.wrapperScript": "Relative path from the repository root to the Gradle Wrapper script.",
  "loc.input.label.options": "Options",
  "loc.input.label.tasks": "Tasks",
  "loc.input.label.cwd": "Working Directory",
  "loc.input.help.cwd": "Working directory in which to run the Gradle build. If not specified, the repository root directory is used.",
  "loc.input.label.publishJUnitResults": "Publish to TFS/Team Services",
  "loc.input.help.publishJUnitResults": "Select this option to publish JUnit test results produced by the Gradle build to TFS/Team Services. Each test results file matching `Test Results Files` will be published as a test run in TFS/Team Services.",
  "loc.input.label.testResultsFiles": "Test Results Files",
  "loc.input.help.testResultsFiles": "Test results files path. Wildcards can be used. For example, `**/TEST-*.xml` for all XML files whose name starts with TEST-.",
  "loc.input.label.testRunTitle": "Test Run Title",
  "loc.input.help.testRunTitle": "Provide a name for the test run.",
  "loc.input.label.codeCoverageTool": "Code Coverage Tool",
  "loc.input.help.codeCoverageTool": "Select the code coverage tool.",
  "loc.input.label.classFilesDirectories": "Class Files Directories",
  "loc.input.help.classFilesDirectories": "Comma-separated list of directories containing class files and archive files (JAR, WAR, etc.). Code coverage is reported for class files in these directories. Normally, classes under `build/classes/main` are searched, which is the default class directory for Gradle builds",
  "loc.input.label.classFilter": "Class Inclusion/Exclusion Filters",
  "loc.input.help.classFilter": "Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*.",
  "loc.input.label.javaHomeSelection": "Set JAVA_HOME by",
  "loc.input.help.javaHomeSelection": "Sets JAVA_HOME either by selecting a JDK version that will be discovered during builds or by manually entering a JDK path.",
  "loc.input.label.jdkVersion": "JDK Version",
  "loc.input.help.jdkVersion": "Will attempt to discover the path to the selected JDK version and set JAVA_HOME accordingly.",
  "loc.input.label.jdkUserInputPath": "JDK Path",
  "loc.input.help.jdkUserInputPath": "Sets JAVA_HOME to the given path.",
  "loc.input.label.jdkArchitecture": "JDK Architecture",
  "loc.input.help.jdkArchitecture": "Optionally supply the architecture (x86, x64) of the JDK."
}