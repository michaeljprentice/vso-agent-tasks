{
  "loc.friendlyName": "Gradle",
  "loc.helpMarkDown": "[More Information](http://go.microsoft.com/fwlink/?LinkID=613720)",
  "loc.description": "Build using a Gradle wrapper script",
  "loc.instanceNameFormat": "gradlew $(tasks)",
  "loc.group.displayName.junitTestResults": "JUnit Test Results",
  "loc.group.displayName.codeCoverage": "Code Coverage",
  "loc.group.displayName.advanced": "Advanced",
  "loc.input.label.wrapperScript": "Gradle Wrapper",
  "loc.input.help.wrapperScript": "Relative path from the repository root to the `Gradle Wrapper script`.",
  "loc.input.label.options": "Options",
  "loc.input.label.tasks": "Tasks",
  "loc.input.label.cwd": "Working Directory",
  "loc.input.help.cwd": "Working directory to run Gradle build in. Defaults to repository root.",
  "loc.input.label.publishJUnitResults": "Publish to VSTS/TFS",
  "loc.input.help.publishJUnitResults": "Select this option to publish JUnit Test results produced by the Gradle build to VSTS/TFS. Each test result file matching `Test Results Files` will be published as a test run in VSTS/TFS.",
  "loc.input.label.testResultsFiles": "Test Results Files",
  "loc.input.help.testResultsFiles": "Test results files path.  Wildcards can be used.  For example, `**/TEST-*.xml` for all xml files whose name starts with TEST-.",
  "loc.input.label.testRunTitle": "Test Run Title",
  "loc.input.help.testRunTitle": "Provide a name for the Test Run.",
  "loc.input.label.codeCoverageTool": "CodeCoverage Tool",
  "loc.input.help.codeCoverageTool": "Select the code coverage tool.",
  "loc.input.label.classFilesDirectories": "Class Files Directories",
  "loc.input.help.classFilesDirectories": "Comma separated list of directories containing class files, archive files(jar, war etc.). Code coverage is reported for class files present in the directories. The task searches for classes under build/main/classes which is default class directory for gradle builds",
  "loc.input.label.classFilter": "Class Inclusion/Exclusion Filters",
  "loc.input.help.classFilter": "Comma separated list of filters to include or exclude classes from collecting code coverage. For example: `+:com.*`,`+:org.*`,`-:my.app*.*`.",
  "loc.input.label.javaHomeSelection": "Set JAVA_HOME by",
  "loc.input.help.javaHomeSelection": "Sets JAVA_HOME either by selecting a JDK version that will be discovered during builds or by manually entering a JDK path.",
  "loc.input.label.jdkVersion": "JDK Version",
  "loc.input.help.jdkVersion": "Will attempt to discover the path to the selected JDK version and set JAVA_HOME accordingly.",
  "loc.input.label.jdkUserInputPath": "JDK Path",
  "loc.input.help.jdkUserInputPath": "Sets JAVA_HOME to the given path.",
  "loc.input.label.jdkArchitecture": "JDK Architecture",
  "loc.input.help.jdkArchitecture": "Optionally supply the architecture (x86, x64) of JDK."
}